(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{750:function(e,t,i){"use strict";i.r(t);var o=i(1),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"state"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[e._v("#")]),e._v(" State")]),e._v(" "),i("h2",{attrs:{id:"signing-info-liveness"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#signing-info-liveness"}},[e._v("#")]),e._v(" Signing Info (Liveness)")]),e._v(" "),i("p",[e._v("Every block includes a set of precommits by the validators for the previous block,\nknown as the "),i("code",[e._v("LastCommitInfo")]),e._v(" provided by Tendermint. A "),i("code",[e._v("LastCommitInfo")]),e._v(" is valid so\nlong as it contains precommits from +2/3 of total voting power.")]),e._v(" "),i("p",[e._v("Proposers are incentivized to include precommits from all validators in the "),i("code",[e._v("LastCommitInfo")]),e._v("\nby receiving additional fees proportional to the difference between the voting\npower included in the "),i("code",[e._v("LastCommitInfo")]),e._v(" and +2/3 (see "),i("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/issues/967",target:"_blank",rel:"noopener noreferrer"}},[e._v("TODO"),i("OutboundLink")],1),e._v(").")]),e._v(" "),i("p",[e._v("Validators are penalized for failing to be included in the "),i("code",[e._v("LastCommitInfo")]),e._v(" for some\nnumber of blocks by being automatically jailed, potentially slashed, and unbonded.")]),e._v(" "),i("p",[e._v("Information about validator's liveness activity is tracked through "),i("code",[e._v("ValidatorSigningInfo")]),e._v(".\nIt is indexed in the store as follows:")]),e._v(" "),i("ul",[i("li",[e._v("ValidatorSigningInfo: "),i("code",[e._v("0x01 | ConsAddress -> amino(valSigningInfo)")])]),e._v(" "),i("li",[e._v("MissedBlocksBitArray: "),i("code",[e._v("0x02 | ConsAddress | LittleEndianUint64(signArrayIndex) -> VarInt(didMiss)")])])]),e._v(" "),i("p",[e._v("The first mapping allows us to easily lookup the recent signing info for a\nvalidator based on the validator's consensus address. The second mapping acts\nas a bit-array of size "),i("code",[e._v("SignedBlocksWindow")]),e._v(" that tells us if the validator missed\nthe block for a given index in the bit-array. The index in the bit-array is given\nas little endian uint64.")]),e._v(" "),i("p",[e._v("The result is a "),i("code",[e._v("varint")]),e._v(" that takes on "),i("code",[e._v("0")]),e._v(" or "),i("code",[e._v("1")]),e._v(", where "),i("code",[e._v("0")]),e._v(" indicates the\nvalidator did not miss (did sign) the corresponding block, and "),i("code",[e._v("1")]),e._v(" indicates\nthey missed the block (did not sign).")]),e._v(" "),i("p",[e._v("Note that the "),i("code",[e._v("MissedBlocksBitArray")]),e._v(" is not explicitly initialized up-front. Keys\nare added as we progress through the first "),i("code",[e._v("SignedBlocksWindow")]),e._v(" blocks for a newly\nbonded validator. The "),i("code",[e._v("SignedBlocksWindow")]),e._v(" parameter defines the size\n(number of blocks) of the sliding window used to track validator liveness.")]),e._v(" "),i("p",[e._v("The information stored for tracking validator liveness is as follows:")]),e._v(" "),i("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBWYWxpZGF0b3JTaWduaW5nSW5mbyBzdHJ1Y3QgewogICAgQWRkcmVzcyAgICAgICAgICAgICBzZGsuQ29uc0FkZHJlc3MKICAgIFN0YXJ0SGVpZ2h0ICAgICAgICAgaW50NjQKICAgIEluZGV4T2Zmc2V0ICAgICAgICAgaW50NjQKICAgIEphaWxlZFVudGlsICAgICAgICAgdGltZS5UaW1lCiAgICBUb21ic3RvbmVkICAgICAgICAgIGJvb2wKICAgIE1pc3NlZEJsb2Nrc0NvdW50ZXIgaW50NjQKfQo="}}),e._v(" "),i("p",[e._v("Where:")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("Address")]),e._v(": The validator's consensus address.")]),e._v(" "),i("li",[i("strong",[e._v("StartHeight")]),e._v(": The height that the candidate became an active validator\n(with non-zero voting power).")]),e._v(" "),i("li",[i("strong",[e._v("IndexOffset")]),e._v(": Index which is incremented each time the validator was a bonded\nin a block and may have signed a precommit or not. This in conjunction with the\n"),i("code",[e._v("SignedBlocksWindow")]),e._v(" param determines the index in the "),i("code",[e._v("MissedBlocksBitArray")]),e._v(".")]),e._v(" "),i("li",[i("strong",[e._v("JailedUntil")]),e._v(": Time for which the validator is jailed until due to liveness downtime.")]),e._v(" "),i("li",[i("strong",[e._v("Tombstoned")]),e._v(": Desribes if the validator is tombstoned or not. It is set once the\nvalidator commits an equivocation or for any other configured misbehiavor.")]),e._v(" "),i("li",[i("strong",[e._v("MissedBlocksCounter")]),e._v(": A counter kept to avoid unnecessary array reads. Note\nthat "),i("code",[e._v("Sum(MissedBlocksBitArray)")]),e._v(" equals "),i("code",[e._v("MissedBlocksCounter")]),e._v(" always.")])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);