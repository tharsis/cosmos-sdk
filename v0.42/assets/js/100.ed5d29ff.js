(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{751:function(g,e,I){"use strict";I.r(e);var C=I(1),t=Object(C.a)({},(function(){var g=this,e=g.$createElement,I=g._self._c||e;return I("ContentSlotsDistributor",{attrs:{"slot-key":g.$parent.slotKey}},[I("h1",{attrs:{id:"accounts"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#accounts"}},[g._v("#")]),g._v(" Accounts")]),g._v(" "),I("p",{attrs:{synopsis:""}},[g._v("This document describes the in-built accounts system of the Cosmos SDK.")]),g._v(" "),I("h3",{attrs:{id:"pre-requisite-readings"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#pre-requisite-readings"}},[g._v("#")]),g._v(" Pre-requisite Readings")]),g._v(" "),I("ul",[I("li",{attrs:{prereq:""}},[I("RouterLink",{attrs:{to:"/basics/app-anatomy.html"}},[g._v("Anatomy of an SDK Application")])],1)]),g._v(" "),I("h2",{attrs:{id:"account-definition"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#account-definition"}},[g._v("#")]),g._v(" Account Definition")]),g._v(" "),I("p",[g._v("In the Cosmos SDK, an "),I("em",[g._v("account")]),g._v(" designates a pair of "),I("em",[g._v("public key")]),g._v(" "),I("code",[g._v("PubKey")]),g._v(" and "),I("em",[g._v("private key")]),g._v(" "),I("code",[g._v("PrivKey")]),g._v(". The "),I("code",[g._v("PubKey")]),g._v(" can be derived to generate various "),I("code",[g._v("Addresses")]),g._v(", which are used to identify users (among other parties) in the application. "),I("code",[g._v("Addresses")]),g._v(" are also associated with "),I("RouterLink",{attrs:{to:"/building-modules/messages-and-queries.html#messages"}},[I("code",[g._v("message")]),g._v("s")]),g._v(" to identify the sender of the "),I("code",[g._v("message")]),g._v(". The "),I("code",[g._v("PrivKey")]),g._v(" is used to generate "),I("a",{attrs:{href:"#signatures"}},[g._v("digital signatures")]),g._v(" to prove that an "),I("code",[g._v("Address")]),g._v(" associated with the "),I("code",[g._v("PrivKey")]),g._v(" approved of a given "),I("code",[g._v("message")]),g._v(".")],1),g._v(" "),I("p",[g._v("To derive "),I("code",[g._v("PubKey")]),g._v("s and "),I("code",[g._v("PrivKey")]),g._v("s, the Cosmos SDK uses a standard called "),I("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[g._v("BIP32"),I("OutboundLink")],1),g._v(". This standard defines how to build an HD wallet, where a wallet is a set of accounts. At the core of every account, there is a seed, which takes the form of a 12 or 24-words mnemonic. From this mnemonic, it is possible to derive any number of "),I("code",[g._v("PrivKey")]),g._v("s using one-way cryptographic function. Then, a "),I("code",[g._v("PubKey")]),g._v(" can be derived from the "),I("code",[g._v("PrivKey")]),g._v(". Naturally, the mnemonic is the most sensitive information, as private keys can always be re-generated if the mnemonic is preserved.")]),g._v(" "),I("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ICAgICBBY2NvdW50IDAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjb3VudCAxICAgICAgICAgICAgICAgICAgICAgICAgIEFjY291bnQgMgoKKy0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLSsKfCAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgIHwKfCAgICBBZGRyZXNzIDAgICAgIHwgICAgICAgICAgICAgIHwgICAgQWRkcmVzcyAxICAgICB8ICAgICAgICAgICAgICAgfCAgICBBZGRyZXNzIDIgICAgIHwKfCAgICAgICAgXiAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIF4gICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgXiAgICAgICAgIHwKfCAgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgfCAgICAgICAgIHwKfCAgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgfCAgICAgICAgIHwKfCAgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgfCAgICAgICAgIHwKfCAgICAgICAgKyAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgICsgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgKyAgICAgICAgIHwKfCAgUHVibGljIGtleSAwICAgIHwgICAgICAgICAgICAgIHwgIFB1YmxpYyBrZXkgMSAgICB8ICAgICAgICAgICAgICAgfCAgUHVibGljIGtleSAyICAgIHwKfCAgICAgICAgXiAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIF4gICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgXiAgICAgICAgIHwKfCAgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgfCAgICAgICAgIHwKfCAgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgfCAgICAgICAgIHwKfCAgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgfCAgICAgICAgIHwKfCAgICAgICAgKyAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgICsgICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgKyAgICAgICAgIHwKfCAgUHJpdmF0ZSBrZXkgMCAgIHwgICAgICAgICAgICAgIHwgIFByaXZhdGUga2V5IDEgICB8ICAgICAgICAgICAgICAgfCAgUHJpdmF0ZSBrZXkgMiAgIHwKfCAgICAgICAgXiAgICAgICAgIHwgICAgICAgICAgICAgIHwgICAgICAgIF4gICAgICAgICB8ICAgICAgICAgICAgICAgfCAgICAgICAgXiAgICAgICAgIHwKKy0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLSsKICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tKy0tLS0tLS0tLSsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE1hc3RlciBQcml2S2V5ICAgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0rLS0tLS0tLS0tKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTW5lbW9uaWMgKFNlZWQpICB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLSsK"}}),g._v(" "),I("p",[g._v("In the Cosmos SDK, accounts are stored and managed via an object called a "),I("a",{attrs:{href:"#keyring"}},[I("code",[g._v("Keyring")])]),g._v(".")]),g._v(" "),I("h2",{attrs:{id:"keyring"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#keyring"}},[g._v("#")]),g._v(" Keyring")]),g._v(" "),I("p",[g._v("A "),I("code",[g._v("Keyring")]),g._v(" is an object that stores and manages accounts. In the Cosmos SDK, a "),I("code",[g._v("Keyring")]),g._v(" implementation follows the "),I("code",[g._v("Keyring")]),g._v(" interface:")]),g._v(" "),I("p",[I("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gS2V5cmluZyBleHBvc2VzIG9wZXJhdGlvbnMgb3ZlciBhIGJhY2tlbmQgc3VwcG9ydGVkIGJ5IGdpdGh1Yi5jb20vOTlkZXNpZ25zL2tleXJpbmcuCnR5cGUgS2V5cmluZyBpbnRlcmZhY2UgewoJLy8gTGlzdCBhbGwga2V5cy4KCUxpc3QoKSAoW11JbmZvLCBlcnJvcikKCgkvLyBTdXBwb3J0ZWQgc2lnbmluZyBhbGdvcml0aG1zIGZvciBLZXlyaW5nIGFuZCBMZWRnZXIgcmVzcGVjdGl2ZWx5LgoJU3VwcG9ydGVkQWxnb3JpdGhtcygpIChTaWduaW5nQWxnb0xpc3QsIFNpZ25pbmdBbGdvTGlzdCkKCgkvLyBLZXkgYW5kIEtleUJ5QWRkcmVzcyByZXR1cm4ga2V5cyBieSB1aWQgYW5kIGFkZHJlc3MgcmVzcGVjdGl2ZWx5LgoJS2V5KHVpZCBzdHJpbmcpIChJbmZvLCBlcnJvcikKCUtleUJ5QWRkcmVzcyhhZGRyZXNzIHNkay5BZGRyZXNzKSAoSW5mbywgZXJyb3IpCgoJLy8gRGVsZXRlIGFuZCBEZWxldGVCeUFkZHJlc3MgcmVtb3ZlIGtleXMgZnJvbSB0aGUga2V5cmluZy4KCURlbGV0ZSh1aWQgc3RyaW5nKSBlcnJvcgoJRGVsZXRlQnlBZGRyZXNzKGFkZHJlc3Mgc2RrLkFkZHJlc3MpIGVycm9yCgoJLy8gTmV3TW5lbW9uaWMgZ2VuZXJhdGVzIGEgbmV3IG1uZW1vbmljLCBkZXJpdmVzIGEgaGllcmFyY2hpY2FsIGRldGVybWluaXN0aWMKCS8vIGtleSBmcm9tIHRoYXQsIGFuZCBwZXJzaXN0cyBpdCB0byB0aGUgc3RvcmFnZS4gUmV0dXJucyB0aGUgZ2VuZXJhdGVkIG1uZW1vbmljIGFuZCB0aGUga2V5CgkvLyBJbmZvLiBJdCByZXR1cm5zIGFuIGVycm9yIGlmIGl0IGZhaWxzIHRvIGdlbmVyYXRlIGEga2V5IGZvciB0aGUgZ2l2ZW4gYWxnbyB0eXBlLCBvciBpZgoJLy8gYW5vdGhlciBrZXkgaXMgYWxyZWFkeSBzdG9yZWQgdW5kZXIgdGhlIHNhbWUgbmFtZS4KCU5ld01uZW1vbmljKHVpZCBzdHJpbmcsIGxhbmd1YWdlIExhbmd1YWdlLCBoZFBhdGggc3RyaW5nLCBhbGdvIFNpZ25hdHVyZUFsZ28pIChJbmZvLCBzdHJpbmcsIGVycm9yKQoKCS8vIE5ld0FjY291bnQgY29udmVydHMgYSBtbmVtb25pYyB0byBhIHByaXZhdGUga2V5IGFuZCBCSVAtMzkgSEQgUGF0aCBhbmQgcGVyc2lzdHMgaXQuCglOZXdBY2NvdW50KHVpZCwgbW5lbW9uaWMsIGJpcDM5UGFzc3dkLCBoZFBhdGggc3RyaW5nLCBhbGdvIFNpZ25hdHVyZUFsZ28pIChJbmZvLCBlcnJvcikKCgkvLyBTYXZlTGVkZ2VyS2V5IHJldHJpZXZlcyBhIHB1YmxpYyBrZXkgcmVmZXJlbmNlIGZyb20gYSBMZWRnZXIgZGV2aWNlIGFuZCBwZXJzaXN0cyBpdC4KCVNhdmVMZWRnZXJLZXkodWlkIHN0cmluZywgYWxnbyBTaWduYXR1cmVBbGdvLCBocnAgc3RyaW5nLCBjb2luVHlwZSwgYWNjb3VudCwgaW5kZXggdWludDMyKSAoSW5mbywgZXJyb3IpCgoJLy8gU2F2ZVB1YktleSBzdG9yZXMgYSBwdWJsaWMga2V5IGFuZCByZXR1cm5zIHRoZSBwZXJzaXN0ZWQgSW5mbyBzdHJ1Y3R1cmUuCglTYXZlUHViS2V5KHVpZCBzdHJpbmcsIHB1YmtleSB0bWNyeXB0by5QdWJLZXksIGFsZ28gaGQuUHViS2V5VHlwZSkgKEluZm8sIGVycm9yKQoKCS8vIFNhdmVNdWx0aXNpZyBzdG9yZXMgYW5kIHJldHVybnMgYSBuZXcgbXVsdHNpZyAob2ZmbGluZSkga2V5IHJlZmVyZW5jZS4KCVNhdmVNdWx0aXNpZyh1aWQgc3RyaW5nLCBwdWJrZXkgdG1jcnlwdG8uUHViS2V5KSAoSW5mbywgZXJyb3IpCgoJU2lnbmVyCgoJSW1wb3J0ZXIKCUV4cG9ydGVyCn0="}})],1),g._v(" "),I("p",[g._v("The default implementation of "),I("code",[g._v("Keyring")]),g._v(" comes from the third-party "),I("a",{attrs:{href:"https://github.com/99designs/keyring",target:"_blank",rel:"noopener noreferrer"}},[I("code",[g._v("99designs/keyring")]),I("OutboundLink")],1),g._v(" library.")]),g._v(" "),I("p",[g._v("A few notes on the "),I("code",[g._v("Keyring")]),g._v(" methods:")]),g._v(" "),I("ul",[I("li",[I("p",[I("code",[g._v("Sign(uid string, payload []byte) ([]byte, tmcrypto.PubKey, error)")]),g._v(" strictly deals with the signature of the "),I("code",[g._v("payload")]),g._v(" bytes. Some preliminary work should be done beforehand to prepare and encode the transaction into a canonical "),I("code",[g._v("[]byte")]),g._v(" form. Protobuf being not deterministic, it has been decided in "),I("RouterLink",{attrs:{to:"/architecture/adr-020-protobuf-transaction-encoding.html"}},[g._v("ADR-020")]),g._v(" that the canonical "),I("code",[g._v("payload")]),g._v(" to sign is the "),I("code",[g._v("SignDoc")]),g._v(" struct, deterministically encoded using "),I("RouterLink",{attrs:{to:"/basics/adr-027-deterministic-protobuf-serialization.html"}},[g._v("ADR-027")]),g._v(". Note that signature verification is not implemented in the SDK by default, it is deferred to the "),I("RouterLink",{attrs:{to:"/core/baseapp.html#antehandler"}},[I("code",[g._v("anteHandler")])]),g._v(".\n"),I("tm-code-block",{staticClass:"codeblock",attrs:{language:"false",base64:"Ly8gU2lnbkRvYyBpcyB0aGUgdHlwZSB1c2VkIGZvciBnZW5lcmF0aW5nIHNpZ24gYnl0ZXMgZm9yIFNJR05fTU9ERV9ESVJFQ1QuCm1lc3NhZ2UgU2lnbkRvYyB7CiAgLy8gYm9keV9ieXRlcyBpcyBwcm90b2J1ZiBzZXJpYWxpemF0aW9uIG9mIGEgVHhCb2R5IHRoYXQgbWF0Y2hlcyB0aGUKICAvLyByZXByZXNlbnRhdGlvbiBpbiBUeFJhdy4KICBieXRlcyBib2R5X2J5dGVzID0gMTsKCiAgLy8gYXV0aF9pbmZvX2J5dGVzIGlzIGEgcHJvdG9idWYgc2VyaWFsaXphdGlvbiBvZiBhbiBBdXRoSW5mbyB0aGF0IG1hdGNoZXMgdGhlCiAgLy8gcmVwcmVzZW50YXRpb24gaW4gVHhSYXcuCiAgYnl0ZXMgYXV0aF9pbmZvX2J5dGVzID0gMjsKCiAgLy8gY2hhaW5faWQgaXMgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjaGFpbiB0aGlzIHRyYW5zYWN0aW9uIHRhcmdldHMuCiAgLy8gSXQgcHJldmVudHMgc2lnbmVkIHRyYW5zYWN0aW9ucyBmcm9tIGJlaW5nIHVzZWQgb24gYW5vdGhlciBjaGFpbiBieSBhbgogIC8vIGF0dGFja2VyCiAgc3RyaW5nIGNoYWluX2lkID0gMzsKCiAgLy8gYWNjb3VudF9udW1iZXIgaXMgdGhlIGFjY291bnQgbnVtYmVyIG9mIHRoZSBhY2NvdW50IGluIHN0YXRlCiAgdWludDY0IGFjY291bnRfbnVtYmVyID0gNDsKfQ=="}})],1)]),g._v(" "),I("li",[I("p",[I("code",[g._v("NewAccount(uid, mnemonic, bip39Passwd, hdPath string, algo SignatureAlgo) (Info, error)")]),g._v(" creates a new account based on the "),I("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[I("code",[g._v("bip44 path")]),I("OutboundLink")],1),g._v(" and persists it on disk (note that the "),I("code",[g._v("PrivKey")]),g._v(" is "),I("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.40.0-rc3/crypto/armor.go",target:"_blank",rel:"noopener noreferrer"}},[g._v("encrypted with a passphrase before being persisted"),I("OutboundLink")],1),g._v(", it is "),I("strong",[g._v("never stored unencrypted")]),g._v("). In the context of this method, the "),I("code",[g._v("account")]),g._v(" and "),I("code",[g._v("address")]),g._v(" parameters refer to the segment of the BIP44 derivation path (e.g. "),I("code",[g._v("0")]),g._v(", "),I("code",[g._v("1")]),g._v(", "),I("code",[g._v("2")]),g._v(", ...) used to derive the "),I("code",[g._v("PrivKey")]),g._v(" and "),I("code",[g._v("PubKey")]),g._v(" from the mnemonic (note that given the same mnemonic and "),I("code",[g._v("account")]),g._v(", the same "),I("code",[g._v("PrivKey")]),g._v(" will be generated, and given the same "),I("code",[g._v("account")]),g._v(" and "),I("code",[g._v("address")]),g._v(", the same "),I("code",[g._v("PubKey")]),g._v(" and "),I("code",[g._v("Address")]),g._v(" will be generated). Finally, note that the "),I("code",[g._v("NewAccount")]),g._v(" method derives keys and addresses using the algorithm specified in the last argument "),I("code",[g._v("algo")]),g._v(". Currently, the SDK supports two public key algorithms:")]),g._v(" "),I("ul",[I("li",[I("code",[g._v("secp256k1")]),g._v(", as implemented in the "),I("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.40.0-rc3/crypto/keys/secp256k1/secp256k1.go",target:"_blank",rel:"noopener noreferrer"}},[g._v("SDK's "),I("code",[g._v("crypto/keys/secp256k1")]),g._v(" package"),I("OutboundLink")],1),g._v(",")]),g._v(" "),I("li",[I("code",[g._v("ed25519")]),g._v(", as implemented in the "),I("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.40.0-rc3/crypto/keys/ed25519/ed25519.go",target:"_blank",rel:"noopener noreferrer"}},[g._v("SDK's "),I("code",[g._v("crypto/keys/ed25519")]),g._v(" package"),I("OutboundLink")],1),g._v(".")])])]),g._v(" "),I("li",[I("p",[I("code",[g._v("ExportPrivKeyArmor(uid, encryptPassphrase string) (armor string, err error)")]),g._v(" exports a private key in ASCII-armored encrypted format, using the given passphrase. You can then either import it again into the keyring using the "),I("code",[g._v("ImportPrivKey(uid, armor, passphrase string)")]),g._v(" function, or decrypt it into a raw private key using the "),I("code",[g._v("UnarmorDecryptPrivKey(armorStr string, passphrase string)")]),g._v(" function.")])])]),g._v(" "),I("p",[g._v("Also see the "),I("a",{attrs:{href:"#addresses"}},[I("code",[g._v("Addresses")])]),g._v(" section for more information.")]),g._v(" "),I("h2",{attrs:{id:"addresses-and-pubkeys"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#addresses-and-pubkeys"}},[g._v("#")]),g._v(" Addresses and PubKeys")]),g._v(" "),I("p",[I("code",[g._v("Addresses")]),g._v(" and "),I("code",[g._v("PubKey")]),g._v("s are both public information that identify actors in the application. There are 3 main types of "),I("code",[g._v("Addresses")]),g._v("/"),I("code",[g._v("PubKeys")]),g._v(" available by default in the Cosmos SDK:")]),g._v(" "),I("ul",[I("li",[g._v("Addresses and Keys for "),I("strong",[g._v("accounts")]),g._v(", which identify users (e.g. the sender of a "),I("code",[g._v("message")]),g._v("). They are derived using the "),I("strong",[I("code",[g._v("secp256k1")])]),g._v(" curve.")]),g._v(" "),I("li",[g._v("Addresses and Keys for "),I("strong",[g._v("validator operators")]),g._v(", which identify the operators of validators. They are derived using the "),I("strong",[I("code",[g._v("secp256k1")])]),g._v(" curve.")]),g._v(" "),I("li",[g._v("Addresses and Keys for "),I("strong",[g._v("consensus nodes")]),g._v(", which identify the validator nodes participating in consensus. They are derived using the "),I("strong",[I("code",[g._v("ed25519")])]),g._v(" curve.")])]),g._v(" "),I("table",[I("thead",[I("tr",[I("th"),g._v(" "),I("th",[g._v("Address bech32 Prefix")]),g._v(" "),I("th",[g._v("Pubkey bech32 Prefix")]),g._v(" "),I("th",[g._v("Curve")]),g._v(" "),I("th",[g._v("Address byte length")]),g._v(" "),I("th",[g._v("Pubkey byte length")])])]),g._v(" "),I("tbody",[I("tr",[I("td",[g._v("Accounts")]),g._v(" "),I("td",[g._v("cosmos")]),g._v(" "),I("td",[g._v("cosmospub")]),g._v(" "),I("td",[I("code",[g._v("secp256k1")])]),g._v(" "),I("td",[I("code",[g._v("20")])]),g._v(" "),I("td",[I("code",[g._v("33")])])]),g._v(" "),I("tr",[I("td",[g._v("Validator Operator")]),g._v(" "),I("td",[g._v("cosmosvaloper")]),g._v(" "),I("td",[g._v("cosmosvaloperpub")]),g._v(" "),I("td",[I("code",[g._v("secp256k1")])]),g._v(" "),I("td",[I("code",[g._v("20")])]),g._v(" "),I("td",[I("code",[g._v("33")])])]),g._v(" "),I("tr",[I("td",[g._v("Consensus Nodes")]),g._v(" "),I("td",[g._v("cosmosvalcons")]),g._v(" "),I("td",[g._v("cosmosvalconspub")]),g._v(" "),I("td",[I("code",[g._v("ed25519")])]),g._v(" "),I("td",[I("code",[g._v("20")])]),g._v(" "),I("td",[I("code",[g._v("32")])])])])]),g._v(" "),I("h3",{attrs:{id:"pubkeys"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#pubkeys"}},[g._v("#")]),g._v(" PubKeys")]),g._v(" "),I("p",[I("code",[g._v("PubKey")]),g._v("s used in the Cosmos SDK are Protobuf messages and have the following methods:")]),g._v(" "),I("p",[I("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gUHViS2V5IGRlZmluZXMgYSBwdWJsaWMga2V5IGFuZCBleHRlbmRzIHByb3RvLk1lc3NhZ2UuCnR5cGUgUHViS2V5IGludGVyZmFjZSB7Cglwcm90by5NZXNzYWdlCgoJQWRkcmVzcygpIEFkZHJlc3MKCUJ5dGVzKCkgW11ieXRlCglWZXJpZnlTaWduYXR1cmUobXNnIFtdYnl0ZSwgc2lnIFtdYnl0ZSkgYm9vbAoJRXF1YWxzKFB1YktleSkgYm9vbAoJVHlwZSgpIHN0cmluZwp9"}})],1),g._v(" "),I("ul",[I("li",[g._v("For "),I("code",[g._v("secp256k1")]),g._v(" keys, the actual implementation can be found "),I("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.40.0-rc3/crypto/keys/secp256k1/secp256k1.go",target:"_blank",rel:"noopener noreferrer"}},[g._v("here"),I("OutboundLink")],1),g._v(".")]),g._v(" "),I("li",[g._v("For "),I("code",[g._v("ed25519")]),g._v(" keys, it can be found "),I("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.40.0-rc3/crypto/keys/ed25519/ed25519.go",target:"_blank",rel:"noopener noreferrer"}},[g._v("here"),I("OutboundLink")],1),g._v(".")])]),g._v(" "),I("p",[g._v("In both case, the actual key (as raw bytes) is the compressed form of the pubkey. The first byte is a "),I("code",[g._v("0x02")]),g._v(" byte if the "),I("code",[g._v("y")]),g._v("-coordinate is the lexicographically largest of the two associated with the "),I("code",[g._v("x")]),g._v("-coordinate. Otherwise the first byte is a "),I("code",[g._v("0x03")]),g._v(". This prefix is followed with the "),I("code",[g._v("x")]),g._v("-coordinate.")]),g._v(" "),I("p",[g._v("Note that in the Cosmos SDK, "),I("code",[g._v("Pubkeys")]),g._v(" are not manipulated in their raw bytes form. Instead, they are encoded to string using "),I("RouterLink",{attrs:{to:"/core/encoding.html#amino"}},[I("code",[g._v("Amino")])]),g._v(" and "),I("a",{attrs:{href:"https://en.bitcoin.it/wiki/Bech32",target:"_blank",rel:"noopener noreferrer"}},[I("code",[g._v("bech32")]),I("OutboundLink")],1),g._v(". In the SDK, it is done by first calling the "),I("code",[g._v("Bytes()")]),g._v(" method on the raw "),I("code",[g._v("Pubkey")]),g._v(" (which applies amino encoding), and then the "),I("code",[g._v("ConvertAndEncode")]),g._v(" method of "),I("code",[g._v("bech32")]),g._v(".")],1),g._v(" "),I("p",[I("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gTXVzdEJlY2gzMmlmeUFkZHJlc3NCeXRlcyByZXR1cm5zIGEgYmVjaDMyIHJlcHJlc2VudGF0aW9uIG9mIGFkZHJlc3MgYnl0ZXMuCi8vIFJldHVybnMgYW4gZW1wdHkgc3RpbmcgaWYgdGhlIGJ5dGUgc2xpY2UgaXMgMC1sZW5ndGguIEl0IHBhbmljcyBpZiB0aGUgYmVjaDMyIGNvbnZlcnNpb24KLy8gZmFpbHMgb3IgdGhlIHByZWZpeCBpcyBlbXB0eS4KZnVuYyBNdXN0QmVjaDMyaWZ5QWRkcmVzc0J5dGVzKHByZWZpeCBzdHJpbmcsIGJzIFtdYnl0ZSkgc3RyaW5nIHsKCXMsIGVyciA6PSBCZWNoMzJpZnlBZGRyZXNzQnl0ZXMocHJlZml4LCBicykKCWlmIGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KCXJldHVybiBzCn0KCi8vIEZvcm1hdCBpbXBsZW1lbnRzIHRoZSBmbXQuRm9ybWF0dGVyIGludGVyZmFjZS4KLy8gbm9saW50OiBlcnJjaGVjawpmdW5jIChjYSBDb25zQWRkcmVzcykgRm9ybWF0KHMgZm10LlN0YXRlLCB2ZXJiIHJ1bmUpIHsKCXN3aXRjaCB2ZXJiIHsKCWNhc2UgJ3MnOgoJCXMuV3JpdGUoW11ieXRlKGNhLlN0cmluZygpKSkKCWNhc2UgJ3AnOgoJCXMuV3JpdGUoW11ieXRlKGZtdC5TcHJpbnRmKCZxdW90OyVwJnF1b3Q7LCBjYSkpKQoJZGVmYXVsdDoKCQlzLldyaXRlKFtdYnl0ZShmbXQuU3ByaW50ZigmcXVvdDslWCZxdW90OywgW11ieXRlKGNhKSkpKQoJfQp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIGF1eGlsaWFyeQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyBCZWNoMzJQdWJLZXlUeXBlIGRlZmluZXMgYSBzdHJpbmcgdHlwZSBhbGlhcyBmb3IgYSBCZWNoMzIgcHVibGljIGtleSB0eXBlLgp0eXBlIEJlY2gzMlB1YktleVR5cGUgc3RyaW5nCgovLyBCZWNoMzIgY29udmVyc2lvbiBjb25zdGFudHMKY29uc3QgKAoJQmVjaDMyUHViS2V5VHlwZUFjY1B1YiAgQmVjaDMyUHViS2V5VHlwZSA9ICZxdW90O2FjY3B1YiZxdW90OwoJQmVjaDMyUHViS2V5VHlwZVZhbFB1YiAgQmVjaDMyUHViS2V5VHlwZSA9ICZxdW90O3ZhbHB1YiZxdW90OwoJQmVjaDMyUHViS2V5VHlwZUNvbnNQdWIgQmVjaDMyUHViS2V5VHlwZSA9ICZxdW90O2NvbnNwdWImcXVvdDsKKQoKLy8gQmVjaDMyaWZ5UHViS2V5IHJldHVybnMgYSBCZWNoMzIgZW5jb2RlZCBzdHJpbmcgY29udGFpbmluZyB0aGUgYXBwcm9wcmlhdGUKLy8gcHJlZml4IGJhc2VkIG9uIHRoZSBrZXkgdHlwZSBwcm92aWRlZCBmb3IgYSBnaXZlbiBQdWJsaWNLZXkuCmZ1bmMgQmVjaDMyaWZ5UHViS2V5KHBrdCBCZWNoMzJQdWJLZXlUeXBlLCBwdWJrZXkgY3J5cHRvLlB1YktleSkgKHN0cmluZywgZXJyb3IpIHsKCXZhciBiZWNoMzJQcmVmaXggc3RyaW5nCgoJc3dpdGNoIHBrdCB7CgljYXNlIEJlY2gzMlB1YktleVR5cGVBY2NQdWI6CgkJYmVjaDMyUHJlZml4ID0gR2V0Q29uZmlnKCkuR2V0QmVjaDMyQWNjb3VudFB1YlByZWZpeCgpCgoJY2FzZSBCZWNoMzJQdWJLZXlUeXBlVmFsUHViOgoJCWJlY2gzMlByZWZpeCA9IEdldENvbmZpZygpLkdldEJlY2gzMlZhbGlkYXRvclB1YlByZWZpeCgpCgoJY2FzZSBCZWNoMzJQdWJLZXlUeXBlQ29uc1B1YjoKCQliZWNoMzJQcmVmaXggPSBHZXRDb25maWcoKS5HZXRCZWNoMzJDb25zZW5zdXNQdWJQcmVmaXgoKQoKCX0KCgkvLyBUaGlzIHBpZWNlIG9mIGNvZGUgaXMgdG8ga2VlcCBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eS4KCS8vIEZvciBlZDI1NTE5IGtleXMsIG91ciBvd24gZWQyNTUxOSBpcyByZWdpc3RlcmVkIGluIEFtaW5vIHVuZGVyIGEKCS8vIGRpZmZlcmVudCBuYW1lIHRoYW4gVE0ncyBlZDI1NTE5LiBCdXQgc2luY2UgdXNlcnMgYXJlIGFscmVhZHkgdXNpbmcKCS8vIFRNJ3MgZWQyNTUxOSBiZWNoMzIgZW5jb2RpbmcsIHdlIGV4cGxpY2l0bHkgc2F5IHRvIGJlY2gzMi1lbmNvZGUgb3VyIG93bgoJLy8gZWQyNTUxOSB0aGUgc2FtZSB3YXkgYXMgVE0ncyBlZDI1NTE5LgoJLy8gVE9ETzogUmVtb3ZlIEJlY2gzMmlmeVB1YktleSBhbmQgYWxsIHVzYWdlcyAoY29zbW9zL2Nvc21vcy1zZGsvaXNzdWVzLyM3MzU3KQoJcGtUb01hcnNoYWwgOj0gcHVia2V5CglpZiBlZDI1NTE5UGssIG9rIDo9IHB1YmtleS4oKmVkMjU1MTkuUHViS2V5KTsgb2sgewoJCXBrVG9NYXJzaGFsID0gZWQyNTUxOVBrLkFzVG1QdWJLZXkoKQoJfQoKCXJldHVybiBiZWNoMzIuQ29udmVydEFuZEVuY29kZShiZWNoMzJQcmVmaXgsIGxlZ2FjeS5DZGMuTXVzdE1hcnNoYWxCaW5hcnlCYXJlKHBrVG9NYXJzaGFsKSkKfQoKLy8gTXVzdEJlY2gzMmlmeVB1YktleSBjYWxscyBCZWNoMzJpZnlQdWJLZXkgZXhjZXB0IGl0IHBhbmljcyBvbiBlcnJvci4KZnVuYyBNdXN0QmVjaDMyaWZ5UHViS2V5KHBrdCBCZWNoMzJQdWJLZXlUeXBlLCBwdWJrZXkgY3J5cHRvLlB1YktleSkgc3RyaW5nIHsKCXJlcywgZXJyIDo9IEJlY2gzMmlmeVB1YktleShwa3QsIHB1YmtleSkKCWlmIGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KCglyZXR1cm4gcmVzCn0KCi8vIEdldFB1YktleUZyb21CZWNoMzIgcmV0dXJucyBhIFB1YmxpY0tleSBmcm9tIGEgYmVjaDMyLWVuY29kZWQgUHVibGljS2V5IHdpdGgKLy8gYSBnaXZlbiBrZXkgdHlwZS4KZnVuYyBHZXRQdWJLZXlGcm9tQmVjaDMyKHBrdCBCZWNoMzJQdWJLZXlUeXBlLCBwdWJrZXlTdHIgc3RyaW5nKSAoY3J5cHRvLlB1YktleSwgZXJyb3IpIHsKCXZhciBiZWNoMzJQcmVmaXggc3RyaW5nCgoJc3dpdGNoIHBrdCB7CgljYXNlIEJlY2gzMlB1YktleVR5cGVBY2NQdWI6CgkJYmVjaDMyUHJlZml4ID0gR2V0Q29uZmlnKCkuR2V0QmVjaDMyQWNjb3VudFB1YlByZWZpeCgpCgoJY2FzZSBCZWNoMzJQdWJLZXlUeXBlVmFsUHViOgoJCWJlY2gzMlByZWZpeCA9IEdldENvbmZpZygpLkdldEJlY2gzMlZhbGlkYXRvclB1YlByZWZpeCgpCgoJY2FzZSBCZWNoMzJQdWJLZXlUeXBlQ29uc1B1YjoKCQliZWNoMzJQcmVmaXggPSBHZXRDb25maWcoKS5HZXRCZWNoMzJDb25zZW5zdXNQdWJQcmVmaXgoKQoKCX0KCglieiwgZXJyIDo9IEdldEZyb21CZWNoMzIocHVia2V5U3RyLCBiZWNoMzJQcmVmaXgpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglhbWlub1BrLCBlcnIgOj0gY3J5cHRvY29kZWMuUHViS2V5RnJvbUJ5dGVzKGJ6KQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CgoJdmFyIHByb3RvUGsgY3J5cHRvLlB1YktleQoJc3dpdGNoIGFtaW5vUGsuKHR5cGUpIHsKCgkvLyBXZSBhcmUgYmVjaDMyaWZ5aW5nIHNvbWUgc2VjcDI1NmsxIGtleXMgaW4gdGVzdHMuCgljYXNlICpzZWNwMjU2azEuUHViS2V5OgoJCXByb3RvUGsgPSBhbWlub1BrCgljYXNlICplZDI1NTE5LlB1YktleToKCQlwcm90b1BrID0gYW1pbm9QawoKCS8vIFJlYWwtbGlmZSBjYXNlLgoJY2FzZSB0bWVkMjU1MTkuUHViS2V5OgoJCXByb3RvUGsgPSAmYW1wO2VkMjU1MTkuUHViS2V5ewoJCQlLZXk6IGFtaW5vUGsuQnl0ZXMoKSwKCQl9CgoJZGVmYXVsdDoKCQkvLyBXZSBvbmx5IGFsbG93IGVkMjU1MTkgcHVia2V5cyB0byBiZSBiZWNoMzItZWQgcmlnaHQgbm93LgoJCXJldHVybiBuaWwsIHNka2Vycm9ycy5XcmFwZihzZGtlcnJvcnMuRXJySW52YWxpZFR5cGUsICZxdW90O2JlY2gzMiBwdWJrZXkgZG9lcyBub3Qgc3VwcG9ydCAlVCZxdW90OywgYW1pbm9QaykKCX0KCglyZXR1cm4gcHJvdG9QaywgbmlsCn0KCi8vIE11c3RHZXRQdWJLZXlGcm9tQmVjaDMyIGNhbGxzIEdldFB1YktleUZyb21CZWNoMzIgZXhjZXB0IGl0IHBhbmljcyBvbiBlcnJvci4KZnVuYyBNdXN0R2V0UHViS2V5RnJvbUJlY2gzMihwa3QgQmVjaDMyUHViS2V5VHlwZSwgcHVia2V5U3RyIHN0cmluZykgY3J5cHRvLlB1YktleSB7CglyZXMsIGVyciA6PSBHZXRQdWJLZXlGcm9tQmVjaDMyKHBrdCwgcHVia2V5U3RyKQoJaWYgZXJyICE9IG5pbCB7CgkJcGFuaWMoZXJyKQoJfQoKCXJldHVybiByZXMKfQoKLy8gR2V0RnJvbUJlY2gzMiBkZWNvZGVzIGEgYnl0ZXN0cmluZyBmcm9tIGEgQmVjaDMyIGVuY29kZWQgc3RyaW5nLgpmdW5jIEdldEZyb21CZWNoMzIoYmVjaDMyc3RyLCBwcmVmaXggc3RyaW5nKSAoW11ieXRlLCBlcnJvcikgewoJaWYgbGVuKGJlY2gzMnN0cikgPT0gMCB7CgkJcmV0dXJuIG5pbCwgZXJyb3JzLk5ldygmcXVvdDtkZWNvZGluZyBCZWNoMzIgYWRkcmVzcyBmYWlsZWQ6IG11c3QgcHJvdmlkZSBhbiBhZGRyZXNzJnF1b3Q7KQoJfQoKCWhycCwgYnosIGVyciA6PSBiZWNoMzIuRGVjb2RlQW5kQ29udmVydChiZWNoMzJzdHIpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglpZiBocnAgIT0gcHJlZml4IHs="}})],1),g._v(" "),I("h3",{attrs:{id:"addresses"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#addresses"}},[g._v("#")]),g._v(" Addresses")]),g._v(" "),I("p",[g._v("The Cosmos SDK comes by default with 3 types of addresses:")]),g._v(" "),I("ul",[I("li",[I("code",[g._v("AccAddress")]),g._v(" for accounts.")]),g._v(" "),I("li",[I("code",[g._v("ValAddress")]),g._v(" for validator operators.")]),g._v(" "),I("li",[I("code",[g._v("ConsAddress")]),g._v(" for validator nodes.")])]),g._v(" "),I("p",[g._v("Each of these address types are an alias for an hex-encoded "),I("code",[g._v("[]byte")]),g._v(" array of length 20. Here is the standard way to obtain an address "),I("code",[g._v("aa")]),g._v(" from a "),I("code",[g._v("Pubkey pub")]),g._v(":")]),g._v(" "),I("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"YWEgOj0gc2RrLkFjY0FkZHJlc3MocHViLkFkZHJlc3MoKS5CeXRlcygpKQo="}}),g._v(" "),I("p",[g._v("These addresses implement the "),I("code",[g._v("Address")]),g._v(" interface:")]),g._v(" "),I("p",[I("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gQWRkcmVzcyBpcyBhIGNvbW1vbiBpbnRlcmZhY2UgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiBhZGRyZXNzZXMgdXNlZCBieSB0aGUgU0RLCnR5cGUgQWRkcmVzcyBpbnRlcmZhY2UgewoJRXF1YWxzKEFkZHJlc3MpIGJvb2wKCUVtcHR5KCkgYm9vbAoJTWFyc2hhbCgpIChbXWJ5dGUsIGVycm9yKQoJTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikKCUJ5dGVzKCkgW11ieXRlCglTdHJpbmcoKSBzdHJpbmcKCUZvcm1hdChzIGZtdC5TdGF0ZSwgdmVyYiBydW5lKQp9"}})],1),g._v(" "),I("p",[g._v("Of note, the "),I("code",[g._v("Marshal()")]),g._v(" and "),I("code",[g._v("Bytes()")]),g._v(" method both return the same raw "),I("code",[g._v("[]byte")]),g._v(" form of the address, the former being needed for Protobuf compatibility. Also, the "),I("code",[g._v("String()")]),g._v(" method is used to return the "),I("code",[g._v("bech32")]),g._v(" encoded form of the address, which should be the only address format with which end-user interract. Here is an example:")]),g._v(" "),I("p",[I("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gU3RyaW5nIGltcGxlbWVudHMgdGhlIFN0cmluZ2VyIGludGVyZmFjZS4KZnVuYyAoYWEgQWNjQWRkcmVzcykgU3RyaW5nKCkgc3RyaW5nIHsKCWlmIGFhLkVtcHR5KCkgewoJCXJldHVybiAmcXVvdDsmcXVvdDsKCX0KCgliZWNoMzJQcmVmaXhBY2NBZGRyIDo9IEdldENvbmZpZygpLkdldEJlY2gzMkFjY291bnRBZGRyUHJlZml4KCkKCgliZWNoMzJBZGRyLCBlcnIgOj0gYmVjaDMyLkNvbnZlcnRBbmRFbmNvZGUoYmVjaDMyUHJlZml4QWNjQWRkciwgYWEuQnl0ZXMoKSkKCWlmIGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KCglyZXR1cm4gYmVjaDMyQWRkcgp9"}})],1),g._v(" "),I("h2",{attrs:{hide:"",id:"next"}},[I("a",{staticClass:"header-anchor",attrs:{href:"#next"}},[g._v("#")]),g._v(" Next")]),g._v(" "),I("p",{attrs:{hide:""}},[g._v("Learn about "),I("RouterLink",{attrs:{to:"/basics/gas-fees.html"}},[g._v("gas and fees")])],1)],1)}),[],!1,null,null,null);e.default=t.exports}}]);